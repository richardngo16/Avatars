{"version":3,"sources":["utils/util.js","components/UserAvatar.js","components/CameraMode.js","App.js","serviceWorker.js","index.js"],"names":["betaFaceRequest","imageSrc","options","method","headers","body","JSON","stringify","api_key","file_base64","replace","detection_flags","fetch","getFaceData","a","json","data","media","faces","tags","console","error","mapTopType","apiDataResponse","wearingHat","filter","field","name","value","confidence","noHairCheck","hairLength","hairTop","mapHairColor","mapFacialHair","hasBeard","hasMustache","UserAvatar","props","apiResponseData","screenshot","avatarStyle","topType","hairColor","accessoriesType","facialHairType","clotheType","clotheColor","eyeType","eyebrowType","style","height","width","src","alt","videoConstraints","facingMode","CameraMode","setScreenshot","setUiState","setApiResponseData","webcamRef","React","useRef","capture","useCallback","current","getScreenshot","audio","ref","screenshotFormat","Button","variant","color","onClick","App","useState","uiState","className","textAlign","loading","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.157f56e1.chunk.js","sourcesContent":["const betaFaceRequest = (imageSrc) => {\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      // Free Api Key directly from website, Don't need .env\n      api_key: \"d45fd466-51e2-4701-8da8-04351c872236\",\n      file_base64: imageSrc.replace(\"data:image/jpeg;base64,\", \"\"),\n      detection_flags: \"classifiers,extended\",\n    }),\n  };\n  return fetch(\"https://www.betafaceapi.com/api/v2/media\", options);\n};\n\nexport const getFaceData = async (imageSrc) => {\n  try {\n    const data = await (await betaFaceRequest(imageSrc)).json();\n    return data.media.faces[0].tags;\n  } catch (e) {\n    console.error(e);\n  }\n};\n\n// Functions to Map to Sketch Properties\nexport const mapTopType = (apiDataResponse) => {\n  const wearingHat = apiDataResponse.filter((field) => {\n    return field.name === \"wearing hat\";\n  })[0];\n\n  if (wearingHat.value === \"yes\" && wearingHat.confidence > 0.8) {\n    return \"Hat\";\n  }\n\n  const noHairCheck = apiDataResponse.filter((field) => {\n    return field.name === \"bald\";\n  })[0];\n\n  if (noHairCheck.value === \"yes\" && noHairCheck.confidence >= 0.9) {\n    return \"NoHair\";\n  }\n\n  // none, very short, short, average, long, very long\n  const hairLength = apiDataResponse.filter((field) => {\n    return field.name === \"hair length\";\n  })[0].value;\n\n  // very short, short, average, thick, very thick\n  const hairTop = apiDataResponse.filter((field) => {\n    return field.name === \"hair top\";\n  })[0].value;\n\n  switch (hairLength) {\n    case \"none\":\n      // already did NoHair This is Sanity Check\n      if (hairTop === \"very short\") {\n        return \"ShortHairTheCaesar\";\n      }\n      if (hairTop === \"short\") {\n        return \"ShortHairRound\";\n      }\n      break;\n    case \"very short\":\n      return \"ShortHairTheCaesar\";\n    case \"short\":\n      return \"ShortHairRound\";\n    case \"average\":\n      return \"ShortHairShortWaved\";\n    case \"long\":\n      return \"LongHairNotTooLong\";\n    case \"very long\":\n      return \"LongHairStraight\";\n    default:\n      return \"ShortHairShortCurly\";\n  }\n};\n\nexport const mapHairColor = (apiDataResponse) => {\n  //black, blond, red, brown, brown light, not natural light, not natural\n  const hairColor = apiDataResponse.filter((field) => {\n    return field.name === \"hair color type\";\n  })[0];\n  switch (hairColor.value) {\n    case \"black\":\n      return \"Black\";\n    case \"blond\":\n      return \"Blonde\";\n    case \"brown\":\n      return \"BrownDark\";\n    case \"brown light\":\n      return \"Brown\";\n    case \"red\":\n      return \"Red\";\n    default:\n      return \"Brown\";\n  }\n};\n\nexport const mapGlasses = (apiDataResponse) => {\n  const hasGlasses = apiDataResponse.filter((field) => {\n    return field.name === \"glasses\";\n  })[0].value;\n  return hasGlasses === \"yes\" ? \"Prescription02\" : \"Blank\";\n};\n\nexport const mapFacialHair = (apiDataResponse) => {\n  //hair beard - none, short, thick\n  const hasBeard = apiDataResponse.filter((field) => {\n    return field.name === \"hair beard\";\n  })[0];\n\n  if ((hasBeard.value !== \"none\") & (hasBeard.confidence > 0.75)) {\n    return \"BeardLight\";\n  }\n\n  const hasMustache = apiDataResponse.filter((field) => {\n    return field.name === \"hair mustache\";\n  })[0];\n\n  if ((hasMustache.value !== \"none\") & (hasMustache.confidence > 0.7)) {\n    return \"MustacheFancy\";\n  }\n  return \"Blank\";\n};\n","import React from \"react\";\nimport Avatar from \"avataaars\";\nimport {\n  mapTopType,\n  mapHairColor,\n  mapGlasses,\n  mapFacialHair,\n} from \"../utils/util\";\n\nconst UserAvatar = (props) => {\n  const { apiResponseData, screenshot } = props;\n  return (\n    <div>\n      <h1> Avatar </h1>\n      <Avatar\n        avatarStyle=\"Circle\"\n        topType={mapTopType(apiResponseData)}\n        hairColor={mapHairColor(apiResponseData)}\n        accessoriesType={mapGlasses(apiResponseData)}\n        facialHairType={mapFacialHair(apiResponseData)}\n        clotheType=\"Hoodie\"\n        clotheColor=\"Black\"\n        eyeType=\"Default\"\n        eyebrowType=\"Default\"\n      />\n      <div>\n        <h1> Original </h1>\n        <img\n          style={{ height: \"300px\", width: \"350px\" }}\n          src={screenshot}\n          alt=\"Original\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default UserAvatar;\n","import React from \"react\";\nimport Webcam from \"react-webcam\";\nimport { getFaceData } from \"../utils/util\";\nimport Button from \"@material-ui/core/Button\";\n\nconst videoConstraints = {\n  facingMode: \"user\"\n};\n\nconst CameraMode = props => {\n  const { setScreenshot, setUiState, setApiResponseData } = props;\n  const webcamRef = React.useRef(null);\n  const capture = React.useCallback(async () => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    setScreenshot(imageSrc);\n    setUiState(\"loading\");\n    const data = await getFaceData(imageSrc);\n    setApiResponseData(data);\n    setUiState(\"avatar\");\n  }, [webcamRef]);\n  return (\n    <div>\n      <Webcam\n        audio={false}\n        ref={webcamRef}\n        height={300}\n        width={\"100%\"}\n        screenshotFormat=\"image/jpeg\"\n        videoConstraints={videoConstraints}\n      />\n      <div>\n        <Button variant=\"contained\" color=\"primary\" onClick={capture}>\n          Capture Photo\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default CameraMode;\n","import React, { useState } from \"react\";\nimport UserAvatar from \"./components/UserAvatar\";\nimport CameraMode from \"./components/CameraMode\";\nimport BeatLoader from \"react-spinners/BeatLoader\";\n\n// TODO Split this file into different components\n// Use contextapi if needed\nconst App = () => {\n  //states\n  const [uiState, setUiState] = useState(\"camera\");\n  const [apiResponseData, setApiResponseData] = useState([]);\n  const [screenshot, setScreenshot] = useState(\"\");\n\n  const LoadingScreen = () => {\n    return (\n      <div>\n        <BeatLoader loading={true} />\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"App\" style={{ textAlign: \"center\" }}>\n      {uiState === \"camera\" && (\n        <CameraMode\n          setUiState={setUiState}\n          setScreenshot={setScreenshot}\n          setApiResponseData={setApiResponseData}\n        />\n      )}\n      {uiState === \"loading\" && <LoadingScreen />}\n      {uiState === \"avatar\" && (\n        <UserAvatar apiResponseData={apiResponseData} screenshot={screenshot} />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}