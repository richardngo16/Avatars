{"version":3,"sources":["utils/util.js","App.js","serviceWorker.js","index.js"],"names":["betaFaceRequest","imageSrc","options","method","headers","body","JSON","stringify","api_key","file_base64","replace","detection_flags","fetch","getFaceData","a","json","data","media","faces","tags","console","error","mapTopType","apiDataResponse","wearingHat","filter","field","name","log","value","confidence","noHairCheck","hairLength","hairTop","mapHairColor","hairColor","mapFacialHair","hasBeard","hasMustache","mapSkin","race","videoConstraints","facingMode","App","useState","uiState","setUiState","apiResponseData","setApiResponseData","webcamRef","React","useRef","capture","useCallback","current","getScreenshot","className","style","textAlign","audio","ref","height","width","screenshotFormat","Button","variant","color","onClick","avatarStyle","topType","accessoriesType","facialHairType","clotheType","clotheColor","eyeType","eyebrowType","Skin","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dfa7b1ce.chunk.js","sourcesContent":["const betaFaceRequest = imageSrc => {\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      // Free Api Key, Don't need .env\n      api_key: \"d45fd466-51e2-4701-8da8-04351c872236\",\n      file_base64: imageSrc.replace(\"data:image/jpeg;base64,\", \"\"),\n      detection_flags: \"classifiers,extended\"\n    })\n  };\n  return fetch(\"https://www.betafaceapi.com/api/v2/media\", options);\n};\n\nexport const getFaceData = async imageSrc => {\n  try {\n    const data = await (await betaFaceRequest(imageSrc)).json();\n    return data.media.faces[0].tags;\n  } catch (e) {\n    console.error(e);\n  }\n};\n\n// Takes in Array of Data\n// {\n//   \"name\": \"5oclock shadow\",\n//   \"value\": \"no\",\n//   \"confidence\": 0.43\n// }\nexport const mapTopType = apiDataResponse => {\n  const wearingHat = apiDataResponse.filter(field => {\n    return field.name === \"wearing hat\";\n  })[0];\n\n  console.log(\"Wearing Hat?\", wearingHat.value);\n  if (wearingHat.value === \"yes\" && wearingHat.confidence > 0.8) {\n    console.log(\"yes hat\");\n    return \"Hat\";\n  }\n\n  const noHairCheck = apiDataResponse.filter(field => {\n    return field.name === \"bald\";\n  })[0];\n\n  console.log(\n    \"NoHair?\",\n    noHairCheck.value,\n    \"Confidence?\",\n    noHairCheck.confidence\n  );\n\n  if (noHairCheck.value === \"yes\" && noHairCheck.confidence >= 0.9) {\n    return \"NoHair\";\n  }\n\n  // none, very short, short, average, long, very long\n  const hairLength = apiDataResponse.filter(field => {\n    return field.name === \"hair length\";\n  })[0].value;\n\n  // very short, short, average, thick, very thick\n  const hairTop = apiDataResponse.filter(field => {\n    return field.name === \"hair top\";\n  })[0].value;\n  console.log(\"hair length\", hairLength);\n  console.log(\"hair top\", hairTop);\n\n  switch (hairLength) {\n    case \"none\":\n      // already did NoHair This is Sanity Check\n      if (hairTop === \"very short\") {\n        return \"ShortHairTheCaesar\";\n      }\n      if (hairTop === \"short\") {\n        return \"ShortHairRound\";\n      }\n      break;\n    case \"very short\":\n      return \"ShortHairTheCaesar\";\n    case \"short\":\n      return \"ShortHairRound\";\n    case \"average\":\n      return \"ShortHairShortWaved\";\n    case \"long\":\n      return \"LongHairNotTooLong\";\n    default:\n      return \"LongHairStraight\";\n  }\n};\n\nexport const mapHairColor = apiDataResponse => {\n  //black, blond, red, brown, brown light, not natural light, not natural\n  const hairColor = apiDataResponse.filter(field => {\n    return field.name === \"hair color type\";\n  })[0];\n  console.log(\"haircolor\", hairColor);\n  switch (hairColor.value) {\n    case \"black\":\n      return \"Black\";\n    case \"blond\":\n      return \"Blonde\";\n    case \"brown\":\n      return \"BrownDark\";\n    case \"brown light\":\n      return \"Brown\";\n    case \"red\":\n      if (hairColor.confidence > 0.8) return \"Red\";\n      break;\n    default:\n      return \"Brown\";\n  }\n};\n\nexport const mapGlasses = apiDataResponse => {\n  const hasGlasses = apiDataResponse.filter(field => {\n    return field.name === \"glasses\";\n  })[0].value;\n  return hasGlasses === \"yes\" ? \"Prescription02\" : \"Blank\";\n};\n\nexport const mapFacialHair = apiDataResponse => {\n  //hair beard - none, short, thick\n  const hasBeard = apiDataResponse.filter(field => {\n    return field.name === \"hair beard\";\n  })[0];\n\n  console.log(\"has beard\", hasBeard);\n\n  if ((hasBeard.value !== \"none\") & (hasBeard.confidence > 0.75)) {\n    return \"BeardLight\";\n  }\n\n  const hasMustache = apiDataResponse.filter(field => {\n    return field.name === \"hair mustache\";\n  })[0];\n\n  if ((hasMustache.value !== \"none\") & (hasMustache.confidence > 0.7)) {\n    return \"MustacheFancy\";\n  }\n  return \"Blank\";\n};\n\nexport const mapSkin = apiDataResponse => {\n  //race - asian-middle-eastern, asian, african-american, hispanic, white, middle eastern, othe\n  const race = apiDataResponse.filter(field => {\n    return field.name === \"race\";\n  })[0];\n  if (race.value === \"white\" && race.confidence > 0.9) return \"Pale\";\n  if (race.value === \"hispanic\" && race.confidence > 0.9) return \"Tanned\";\n  if (race.value === \"african-american\" && race.confidence > 0.9)\n    return \"Black\";\n  return \"Light\";\n};\n","import React, { useState } from \"react\";\nimport Webcam from \"react-webcam\";\nimport {\n  getFaceData,\n  mapTopType,\n  mapHairColor,\n  mapGlasses,\n  mapFacialHair,\n  mapSkin\n} from \"./utils/util\";\nimport Button from \"@material-ui/core/Button\";\nimport Avatar from \"avataaars\";\n\n// TODO Split this file into different components\n// Use contextapi if needed\n\nconst videoConstraints = {\n  facingMode: \"user\"\n};\n\nconst App = () => {\n  //states\n  const [uiState, setUiState] = useState(\"camera\");\n  const [apiResponseData, setApiResponseData] = useState([]);\n  const webcamRef = React.useRef(null);\n  const capture = React.useCallback(async () => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    setUiState(\"loading\");\n    const data = await getFaceData(imageSrc);\n    setApiResponseData(data);\n    setUiState(\"avatar\");\n  }, [webcamRef]);\n\n  const CameraMode = () => {\n    return (\n      <div>\n        <Webcam\n          audio={false}\n          ref={webcamRef}\n          height={300}\n          width={\"100%\"}\n          screenshotFormat=\"image/jpeg\"\n          videoConstraints={videoConstraints}\n        />\n        <div>\n          <Button variant=\"contained\" color=\"primary\" onClick={capture}>\n            Capture Photo\n          </Button>\n        </div>\n      </div>\n    );\n  };\n\n  const LoadingScreen = () => {\n    return (\n      <div>\n        <h1>Please Wait ...</h1>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"App\" style={{ textAlign: \"center\" }}>\n      {uiState === \"camera\" && <CameraMode />}\n      {uiState === \"loading\" && <LoadingScreen />}\n      {uiState === \"avatar\" && (\n        <Avatar\n          avatarStyle=\"Circle\"\n          topType={mapTopType(apiResponseData)}\n          hairColor={mapHairColor(apiResponseData)}\n          accessoriesType={mapGlasses(apiResponseData)}\n          facialHairType={mapFacialHair(apiResponseData)}\n          clotheType=\"Hoodie\"\n          clotheColor=\"Black\"\n          eyeType=\"Default\"\n          eyebrowType=\"Default\"\n          Skin={mapSkin(apiResponseData)}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}